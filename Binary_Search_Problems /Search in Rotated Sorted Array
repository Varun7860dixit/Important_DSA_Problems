# 🔍 Search in Rotated Sorted Array

**Problem:**  
Given a rotated sorted array `nums` and a target value `target`, return the index of `target` if it is in the array, or `-1` if it is not.

**Approach:**  
We use a modified binary search to handle the rotation. The idea is to check which part of the array is sorted and then decide where to search.
Time Complexity: O(log n)
Space Complexity: O(1)
---

### ✅ C++ Solution

```cpp
int search(vector<int>& nums, int target) {
    int x = nums.size();
    int start = 0;
    int end = x - 1;

    while (start <= end) {
        int mid = start + (end - start) / 2;

        if (nums[mid] == target) {
            return mid;
        }
        else if (nums[mid] >= nums[0]) {
            if (nums[start] <= target && nums[mid] >= target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        else {
            if (nums[end] >= target && nums[mid] <= target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
    }

    return -1;
}
